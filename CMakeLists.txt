cmake_minimum_required(VERSION 3.0)

set(OUTPUT_DIR ${CMAKE_HOME_DIRECTORY}/target/)

set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${OUTPUT_DIR})
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${OUTPUT_DIR})
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${OUTPUT_DIR})
SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG ${OUTPUT_DIR})
SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE ${OUTPUT_DIR})
SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY_DEBUG ${OUTPUT_DIR})
SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY_RELEASE ${OUTPUT_DIR})
SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_DEBUG ${OUTPUT_DIR})
SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_RELEASE ${OUTPUT_DIR})

set(src src/PolyMost.cpp src/ConnectCommand.cpp src/PolyMostCommand.cpp)
include_directories(src)

# define the project
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

if(DEFINED POCO)
	set(CMAKE_PREFIX_PATH ${CMAKE_PREFIX_PATH};${POCO})
	message("CMAKE_PREFIX_PATH: " ${CMAKE_PREFIX_PATH})
endif()

SET(POCO_MODULES Foundation Util Net Data DataSQLite XML JSON NetSSL)

find_package(Poco REQUIRED ${POCO_MODULES})

# Find the POCO paths and libs

#find_package(OpenSSL REQUIRED) 
#if( OpenSSL_FOUND )
#    include_directories(${OPENSSL_INCLUDE_DIRS})
#    link_directories(${OPENSSL_LIBRARIES})
#    message(STATUS "Using OpenSSL ${OPENSSL_VERSION} with directories \"${OPENSSL_INCLUDE_DIRS}\"")
#endif()

set(Protobuf_USE_STATIC_LIBS FALSE)
if(DEFINED PROTOBUF_DYN_INSTALL)
	list(APPEND CMAKE_PREFIX_PATH ${PROTOBUF_DYN_INSTALL})
endif()

find_package(Protobuf REQUIRED)
protobuf_generate_cpp(
	PROTO_SRC
	PROTO_HDR
	"mattermost.proto"
)


if(DEFINED CURLPP) 
	set(CMAKE_PREFIX_PATH ${CMAKE_PREFIX_PATH};${CURLPP})
	set(CURLPP_INCLUDE ${CURLPP}/include)
	set(CURLPP_LIB ${CURLPP}/lib)
endif()
message("INCLUDE: " ${CURLPP_INCLUDE})

include("${CMAKE_CURRENT_SOURCE_DIR}/static.cmake")
include("${CMAKE_CURRENT_SOURCE_DIR}/shared.cmake")
